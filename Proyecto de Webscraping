# ✅ Instalación y configuración para Google Colab
!apt update > /dev/null
!apt install chromium-chromedriver -y > /dev/null
!cp /usr/lib/chromium-browser/chromedriver /usr/bin
!pip install selenium pandas matplotlib seaborn scikit-learn > /dev/null

import sys
sys.path.insert(0, '/usr/lib/chromium-browser/chromedriver')

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import time

# ✅ Configuración del navegador en modo headless
chrome_options = Options()
chrome_options.add_argument("--headless")
chrome_options.add_argument("--disable-dev-shm-usage")
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--window-size=1920,1080")

service = Service("/usr/bin/chromedriver")
driver = webdriver.Chrome(service=service, options=chrome_options)

# ✅ URL del evento (11K varonil - IPN Once K 2024)
url = "https://resultados.asdeporte.com/resultados-evento/ipn-once-k-2024-bdv/6529/5/1"
driver.get(url)
time.sleep(10)

# ✅ Scraping de la tabla
rows = driver.find_elements(By.XPATH, "//table//tbody/tr")
data = []
for row in rows:
    cols = row.find_elements(By.TAG_NAME, "td")
    if len(cols) >= 7:
        data.append({
            "Lugar": cols[0].text,
            "Nombre": cols[2].text,
            "Categoría": cols[3].text,
            "Tiempo (texto)": cols[5].text
        })

driver.quit()

# ✅ Procesamiento de datos
df = pd.DataFrame(data)

def tiempo_a_minutos(tiempo_str):
    try:
        partes = list(map(int, tiempo_str.strip().split(":")))
        if len(partes) == 3:
            h, m, s = partes
            return h * 60 + m + s / 60
        elif len(partes) == 2:
            m, s = partes
            return m + s / 60
    except:
        return None

df["Tiempo (min)"] = df["Tiempo (texto)"].apply(tiempo_a_minutos)

# ✅ Clusterización
scaler = StandardScaler()
X_scaled = scaler.fit_transform(df[["Tiempo (min)"]])
kmeans = KMeans(n_clusters=3, random_state=42)
df["Cluster"] = kmeans.fit_predict(X_scaled)

# ✅ Clasificación de desempeño
df["Desempeño"] = pd.cut(df["Tiempo (min)"],
                         bins=[0, 55, 65, 80, 200],
                         labels=["Excelente", "Bueno", "Promedio", "Bajo"])

# ✅ Visualización 1: Histograma por clúster
plt.figure(figsize=(10, 6))
sns.histplot(data=df, x="Tiempo (min)", hue="Cluster", bins=30, palette="Set2", kde=True)
plt.title("Distribución de Tiempos por Clúster - IPN Once K 2024")
plt.xlabel("Tiempo (minutos)")
plt.ylabel("Número de corredores")
plt.grid(True)
plt.show()

# ✅ Visualización 2: Top 30 por tiempo
plt.figure(figsize=(12, 6))
top_df = df.sort_values(by="Tiempo (min)").head(30)
sns.barplot(data=top_df, x="Nombre", y="Tiempo (min)", hue="Desempeño", dodge=False)
plt.title("Top 30 Corredores por Tiempo - Clasificación por Desempeño")
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

# ✅ Ver los primeros datos
df.head(10)

